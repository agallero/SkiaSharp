// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using SkiaSharp;

namespace Skia.OSX.Demo
{
	public partial class SkiaView : NSView
	{
		Action <SKCanvas, int, int> onDrawCallback;

		public SkiaView (IntPtr handle) : base (handle)
		{
		}

		public override void DrawRect (CoreGraphics.CGRect dirtyRect)
		{
			base.DrawRect (dirtyRect);

			if (onDrawCallback == null)
				return;

			// Just not that sharp using the scale pixel scale only
			// Going going 2x Pixel Scale
			var screenScale = (int)NSScreen.MainScreen.BackingScaleFactor * 2;
			var width = (int)Bounds.Width * screenScale;
			var height = (int)Bounds.Height * screenScale;

			IntPtr buff = System.Runtime.InteropServices.Marshal.AllocCoTaskMem (width * height * 4);
			try {

				using (var surface = SKSurface.Create (width, height, SKColorType.Rgba_8888, SKAlphaType.Premul, buff, width * 4)) {
					var skcanvas = surface.Canvas;

					skcanvas.Scale (screenScale, screenScale);

					onDrawCallback (skcanvas, (int)Bounds.Width, (int)Bounds.Height);
				}

				using (var colorSpace = CoreGraphics.CGColorSpace.CreateDeviceRGB ()) {
					int hack = ((int)CoreGraphics.CGBitmapFlags.ByteOrderDefault) | ((int)CoreGraphics.CGImageAlphaInfo.PremultipliedLast);
					using (var bContext = new CoreGraphics.CGBitmapContext (buff, width, height, 8, width * 4, colorSpace, (CoreGraphics.CGImageAlphaInfo) hack)) {
						using (var image = bContext.ToImage ()) {
							using (var context = NSGraphicsContext.CurrentContext.GraphicsPort) {
								context.DrawImage (Bounds, image);
							}
						}
					}
				}
			} finally {
				if (buff != IntPtr.Zero)
					System.Runtime.InteropServices.Marshal.FreeCoTaskMem (buff);
			}
		}

		public Action<SKCanvas, int, int> OnDrawCallback {
			get {
				return onDrawCallback;
			}
			set {
				onDrawCallback = value;
				SetNeedsDisplayInRect (Bounds);
			}
		}
	}
}
